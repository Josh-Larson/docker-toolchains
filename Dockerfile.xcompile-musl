# Prepare build directory
WORKDIR /gcc_build
RUN wget https://ftpmirror.gnu.org/binutils/$BINUTILS.tar.bz2
RUN wget https://ftpmirror.gnu.org/gcc/$GCC/$GCC.tar.gz
RUN wget https://musl.libc.org/releases/$MUSL.tar.gz
RUN for t in *.tar.*; do echo $t; tar xf $t; done
RUN cd $GCC; ./contrib/download_prerequisites; cd ..

# Prepare cross directory
RUN mkdir $CROSS
ENV PATH=$CROSS/bin:$PATH

ARG TARGET=$MUSL_TARGET
ARG BINUTILS_CONFIGURATION="--prefix=$CROSS --target=$TARGET --enable-gold $COMPILE_OPTIONS"
ARG GCC_CONFIGURATION="--prefix=$CROSS --target=$TARGET \
	--enable-languages=c,c++ \
	--disable-bootstrap \
	--disable-multilib \
	--disable-libsanitizer \
	$COMPILE_OPTIONS"
ARG MUSL_CONFIGURATION="--prefix=$CROSS/$TARGET --target=$TARGET --host=$TARGET --build=$MACHTYPE $COMPILE_OPTIONS"

# Build binutils
RUN mkdir build-binutils; \
	cd build-binutils && \
	../$BINUTILS/configure $BINUTILS_CONFIGURATION && \
	make -j && \
	make install && \
	cd ..

# Build partial gcc
RUN mkdir build-gcc; \
	cd build-gcc && \
	../$GCC/configure $GCC_CONFIGURATION && \
	make -j all-gcc && \
	make install-gcc && \
	cd ..

# Install musl headers
RUN mkdir build-musl; \
	cd build-musl; \
	../$MUSL/configure LIBCC="$CROSS/lib/gcc/$TARGET/*/libgcc.a" $MUSL_CONFIGURATION && \
	make install-headers && \
	cd ..

# Build libgcc
RUN cd build-gcc; \
	make enable_shared=no -j all-target-libgcc && \
	make install-target-libgcc && \
	cd ..

# Build musl
RUN cd build-musl; \
	make -j && \
	make install && \
	cd ..

# Build gcc
RUN cd build-gcc; \
	../$GCC/configure $GCC_CONFIGURATION && \
	make -j && \
	make install && \
	cd ..

# Clean up
WORKDIR /
RUN rm -rf gcc_build

# Add nice-to-haves
WORKDIR /extra

RUN apt-get update && apt-get install -y libssl-dev ninja-build

## cmake
ARG CMAKE=cmake-$CMAKE_VERSION

### Cross Compilation Variables
RUN echo ""\
	"set(CMAKE_SYSTEM_NAME Linux)\n"\
	"set(CMAKE_SYSROOT $SYSROOT)\n"\
	"set(CMAKE_C_COMPILER $CROSS/bin/$TARGET-gcc)\n"\
	"set(CMAKE_CXX_COMPILER $CROSS/bin/$TARGET-g++)\n" | sed 's/^ *//' > /toolchain.cmake

### Make and install
RUN wget "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/$CMAKE.tar.gz" && \
	tar xf "$CMAKE.tar.gz" && \
	cd "$CMAKE" && \
	CC=`which gcc` CXX=`which g++` ./bootstrap -- -DCMAKE_BUILD_TYPE:STRING=Release && \
	make -j && \
	make install
RUN rm -rf $CMAKE
ENV CMAKE_TOOLCHAIN_FILE=/toolchain.cmake
ENV CMAKE_GENERATOR=Ninja

WORKDIR /
